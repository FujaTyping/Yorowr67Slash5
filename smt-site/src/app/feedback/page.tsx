"use client";

import { useEffect, useState } from "react";
import { Button, TextInput, Textarea } from "flowbite-react";
import axios from "axios";
import useLocalStorge from "../lib/localstorage-db";
import Turnstile, { useTurnstile } from "react-turnstile";
import { IoSend } from "react-icons/io5";
import smtConfig from "../smt-config.mjs";
import { ToastContainer, toast } from 'react-toastify';

export default function Feedback() {
  const turnstile = useTurnstile();
  const [title] = useState("Hatyaiwit - ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞");
  const { email } = useLocalStorge(false);
  const [name, setName] = useState("");
  const [realEmail, setRealEmail] = useState("");
  const [decs, setDecs] = useState("");
  const [isVerify, setVerify] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const submitFeedback = () => {
    const id = toast.loading("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
    if (isVerify) {
      setIsLoading(true);
      axios
        .post(`${smtConfig.apiMain}feedback`, {
          name: name,
          email: realEmail,
          decs: decs,
        })
        .then((response) => {
          toast.update(id, { render: `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß ${response.data}`, type: "success", isLoading: false, autoClose: 8000 });
          setVerify(false);
          turnstile.reset();
          setIsLoading(false);
        })
        .catch((error) => {
          toast.update(id, { render: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ${error.response.data}`, closeOnClick: true, type: "error", isLoading: false, autoClose: 10000 });
          setIsLoading(false);
        });
    } else {
      toast.update(id, { render: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ú‡πà‡∏≤‡∏ô CAPTCHA`, closeOnClick: true, type: "error", isLoading: false, autoClose: 10000 });
    }
  };

  useEffect(() => {
    if (email) {
      setRealEmail(email);
    }
  }, [email]);

  return (
    <>
      <title>{title}</title>
      <meta property="og:title" content={title} />
      <ToastContainer position="bottom-right" newestOnTop draggable hideProgressBar={false} />
      <div className="container px-5 py-24 mx-auto">
        <div className="flex flex-col text-center w-full mb-12">
          <h1 style={{ marginBottom: "15px" }} className="border-b">
            üì• ‡∏™‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô - Feedback
          </h1>
          <h2 style={{ fontSize: "18px" }}>
            ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏∏‡∏Å‡πÜ‡∏ó‡πà‡∏≤‡∏ô
          </h2>
        </div>
        <div className="lg:w-1/2 md:w-2/3 mx-auto">
          <form className="flex flex-wrap -m-2">
            <div className="p-2 w-1/2">
              <div className="relative">
                <label
                  htmlFor="name"
                  className="leading-7 text-sm"
                >
                  ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
                </label>
                <TextInput
                  placeholder="‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"
                  onChange={(event) => setName(event.target.value)}
                  required
                />
              </div>
            </div>
            <div className="p-2 w-1/2">
              <div className="relative">
                <label
                  htmlFor="email"
                  className="leading-7 text-sm"
                >
                  ‡∏≠‡∏µ‡πÄ‡∏°‡∏•
                </label>
                <TextInput
                  placeholder="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
                  value={realEmail}
                  onChange={(event) => setRealEmail(event.target.value)}
                  required
                />
              </div>
            </div>
            <div className="p-2 w-full">
              <div className="relative">
                <label
                  htmlFor="description"
                  className="leading-7 text-sm"
                >
                  ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
                </label>
                <Textarea
                  placeholder="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
                  onChange={(event) => setDecs(event.target.value)}
                  required
                />
              </div>
            </div>
            <div className="flex justify-center items-center p-2 w-full">
              <Turnstile
                sitekey="0x4AAAAAAAwmJyPRGMPSMEvC"
                theme="light"
                language={"th"}
                onVerify={() => {
                  setVerify(true);
                }}
              />
            </div>
            <div className="flex justify-center items-center p-2 w-full">
              {isLoading ? (
                <>
                  <Button isProcessing style={{ backgroundColor: "#2d76ff" }}
                    color="blue" onClick={submitFeedback}>
                    ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠
                  </Button>
                </>
              ) : (
                <>
                  <Button style={{ backgroundColor: "#2d76ff" }}
                    color="blue" onClick={submitFeedback}>
                    ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠
                    <IoSend className="ml-2 h-5 w-5" />
                  </Button>
                </>
              )}
            </div>
          </form>
        </div>
      </div>
    </>
  );
}
