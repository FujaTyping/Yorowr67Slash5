"use client";

import { useState, useEffect } from "react";
import axios from "axios";
import { Table, Pagination, Button } from "flowbite-react";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from "recharts";
import { FaHistory } from "react-icons/fa";
import smtConfig from "../smt-config.mjs";

import dayjs from "dayjs";
import customParseFormat from "dayjs/plugin/customParseFormat";
import buddhistEra from "dayjs/plugin/buddhistEra";

import { Calendar, momentLocalizer } from "react-big-calendar";
import moment from "moment";
import "react-big-calendar/lib/css/react-big-calendar.css";

interface Homework {
  Subject: string;
  Time: string;
  Decs: string;
  Due: string;
  isDue: boolean;
}

type ThaiMonth =
  | "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°"
  | "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå"
  | "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°"
  | "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô"
  | "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°"
  | "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô"
  | "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°"
  | "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°"
  | "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô"
  | "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°"
  | "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô"
  | "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°";

const monthMap: Record<ThaiMonth, string> = {
  ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°: "01",
  ‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå: "02",
  ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°: "03",
  ‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô: "04",
  ‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°: "05",
  ‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô: "06",
  ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°: "07",
  ‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°: "08",
  ‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô: "09",
  ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°: "10",
  ‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô: "11",
  ‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°: "12",
};

const localizer = momentLocalizer(moment);

dayjs.extend(customParseFormat);
dayjs.extend(buddhistEra);

const Chartsdata = [{ name: "‡πÄ‡∏ó‡∏≠‡∏° 1", value: 0 }];

export default function Homework() {
  const [data, setData] = useState<Homework[]>([
    {
      Due: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
      Decs: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
      Time: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
      Subject: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
      isDue: false,
    },
  ]);
  const [title] = useState("Hatyaiwit - ‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô");
  const [currentPage, setCurrentPage] = useState(1);
  const [currentDate, setCurrentDate] = useState(moment());
  const itemsPerPage = 15;
  const currentMonthText = currentDate.format("MMMM YYYY");

  const convertThaiDateToISO = (thaiDate: string): string => {
    try {
      const [day, monthThai, yearThai] = thaiDate.split(" ");

      if (!day || !monthThai || !yearThai) {
        throw new Error(`Invalid Fields: ${thaiDate}`);
      }

      const month = monthMap[monthThai as ThaiMonth];
      if (!month) {
        throw new Error(`Invalid month in Thai date: ${monthThai}`);
      }

      const year = parseInt(yearThai) - 543;

      const formattedDate = `${year}-${month}-${day.padStart(2, "0")}`;
      const isoDate = dayjs(formattedDate, "YYYY-MM-DD", true).toISOString();

      if (!isoDate) {
        throw new Error(`Failed to parse date: ${formattedDate}`);
      }

      return isoDate;
    } catch (error) {
      console.error("Error in convertThaiDateToISO:", error);
      return "";
    }
  };

  useEffect(() => {
    axios
      .get(`${smtConfig.apiMain}homework`)
      .then((response) => {
        setData(response.data.Homework);
      })
      .catch((error) => {
        setData([
          {
            Due: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ",
            Decs: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            Time: "‡πÑ‡∏î‡πâ",
            Subject: `${error}`,
            isDue: false,
          },
        ]);
      });
  }, []);

  const events = data.map((hw) => {
    const dueDate = hw.Due === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" ? "" : convertThaiDateToISO(hw.Due);
  
    if (!dueDate) {
      return null;
    }
  
    return {
      title: `${hw.Subject}: ${hw.Decs}`,
      start: new Date(dueDate),
      end: new Date(dueDate),
    };
  }).filter(event => event !== null);
  
  const goToToday = () => {
    setCurrentDate(moment());
  };

  const goToNextMonth = () => {
    setCurrentDate(currentDate.clone().add(1, "month"));
  };

  const goToPrevMonth = () => {
    setCurrentDate(currentDate.clone().subtract(1, "month"));
  };

  const totalPages = Math.ceil(data.length / itemsPerPage);

  const currentData = data.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const startItem = (currentPage - 1) * itemsPerPage + 1;
  const endItem = Math.min(currentPage * itemsPerPage, data.length);

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };
  return (
    <>
      <title>{title}</title>
      <meta property="og:title" content={title} />
      <div className="container">
        <h1 style={{ marginBottom: "15px" }} className="border-b">
          üìö ‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô - Homework
        </h1>
        <h2 style={{ fontSize: "18px" }}>
          ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°
          ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô)
          <br />
          üî¥ ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏Ñ‡∏∑‡∏≠ ‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á
          <br />
          <span className="flex" style={{ alignItems: "center" }}>
            <FaHistory style={{ marginRight: "6px" }} /> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å‡πÜ 5 ‡∏ô‡∏≤‡∏ó‡∏µ
          </span>
        </h2>

        <div className="pt-5">
          <div className="flex justify-end gap-5">
            <Button
              onClick={goToPrevMonth}
              style={{ backgroundColor: "#ff1616" }}
            >
              ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            </Button>
            <Button 
              onClick={goToToday} 
              style={{ backgroundColor: "#3ddb87" }}
            >
              ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
            </Button>
            <Button
              onClick={goToNextMonth}
              style={{ backgroundColor: "#2d76ff" }}
            >
              ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            </Button>
          </div>
          <div className="overflow-x-auto">
            <div>
              <h2>{currentMonthText}</h2>
            </div>
            <Calendar
              localizer={localizer}
              events={events}
              startAccessor="start"
              endAccessor="end"
              style={{ height: "80vh" }}
              className="tailwind-calendar text-sm sm:text-base"
              toolbar={false}
              showAllEvents={true}
              popup={true}
              date={currentDate.toDate()}
            />
          </div>
        </div>

        <div
          id="DataFrame"
          style={{ marginTop: "20px" }}
          className="overflow-x-auto"
        >
          <Table hoverable>
            <Table.Head>
              <Table.HeadCell>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</Table.HeadCell>
              <Table.HeadCell>‡∏ß‡∏¥‡∏ä‡∏≤</Table.HeadCell>
              <Table.HeadCell>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô</Table.HeadCell>
              <Table.HeadCell>‡∏Å‡∏≥‡∏´‡∏°‡∏î‡∏™‡πà‡∏á</Table.HeadCell>
            </Table.Head>
            <Table.Body className="divide-y">
              {currentData.map((Homework, index) => (
                <Table.Row
                  className="bg-white"
                  style={{ color: Homework.isDue ? "red" : "black" }}
                  key={index}
                >
                  <Table.Cell className="whitespace-nowrap font-medium dark:text-white">
                    {Homework.Time}
                  </Table.Cell>
                  <Table.Cell className="whitespace-nowrap font-medium">
                    {Homework.Subject}
                  </Table.Cell>
                  <Table.Cell className="whitespace-nowrap font-medium">
                    {Homework.Decs}
                  </Table.Cell>
                  <Table.Cell className="whitespace-nowrap font-medium">
                    {Homework.Due}
                  </Table.Cell>
                </Table.Row>
              ))}
            </Table.Body>
          </Table>
          <div
            style={{
              flexDirection: "column",
              alignItems: "center",
              marginTop: "17px",
            }}
            className="flex justify-center"
          >
            <p>
              ‡πÅ‡∏™‡∏î‡∏á {startItem}-{endItem} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {data.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            </p>
            <Pagination
              style={{ marginTop: "-20px" }}
              currentPage={currentPage}
              totalPages={totalPages}
              onPageChange={handlePageChange}
              previousLabel="‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤"
              nextLabel="‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"
            />
          </div>
        </div>
      </div>
      <div className="container">
        <h1 style={{ marginBottom: "15px" }} className="border-b">
          üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô - Chart
        </h1>
        <h2 style={{ fontSize: "18px" }}>
          ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏£‡∏∞‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏Ç‡∏≠‡∏á ‡∏ó‡∏∏‡∏Å‡∏†‡∏≤‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
        </h2>
        <ResponsiveContainer
          style={{ marginTop: "25px" }}
          width="100%"
          height={300}
        >
          <LineChart data={Chartsdata}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="name" />
            <YAxis allowDecimals={false} />
            <Tooltip />
            <Legend />
            <Line
              type="monotone"
              dataKey="value"
              name="‡∏†‡∏≤‡∏£‡∏∞‡∏á‡∏≤‡∏ô"
              stroke="#ff1616"
              activeDot={{ r: 8 }}
            />
          </LineChart>
        </ResponsiveContainer>
      </div>
    </>
  );
}
